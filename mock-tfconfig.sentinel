import "strings"
import "types"

_modules = {
	"root": {
		"data":    {},
		"modules": {},
		"outputs": {},
		"providers": {
			"google": {
				"alias": {
					"": {
						"config": {
							"credentials": null,
							"project":     "prefab-breaker-319803",
							"region":      "us-central1",
						},
						"references": {
							"credentials": [],
							"project":     [],
							"region":      [],
						},
						"version": "",
					},
				},
				"config": {
					"credentials": null,
					"project":     "prefab-breaker-319803",
					"region":      "us-central1",
				},
				"references": {
					"credentials": [],
					"project":     [],
					"region":      [],
				},
				"version": "",
			},
		},
		"resources": {
			"google_compute_address": {
				"static": {
					"config": {
						"name": "ipv4-address1",
					},
					"provisioners": null,
					"references": {
						"name": [],
					},
				},
			},
			"google_compute_instance": {
				"example": {
					"config": {
						"boot_disk": [
							{
								"initialize_params": [
									{
										"image": "ubuntu-1604-lts",
									},
								],
							},
						],
						"machine_type": "f1-micro",
						"name":         "instance01",
						"network_interface": [
							{},
						],
						"zone": "us-central1-a",
					},
					"provisioners": null,
					"references": {
						"boot_disk": [
							{
								"initialize_params": [
									{
										"image": [],
									},
								],
							},
						],
						"machine_type": [],
						"name":         [],
						"network_interface": [
							{
								"subnetwork": [
									"google_compute_subnetwork.subnet.self_link",
									"google_compute_subnetwork.subnet",
								],
							},
						],
						"zone": [],
					},
				},
			},
			"google_compute_network": {
				"vpc": {
					"config": {
						"auto_create_subnetworks": "false",
					},
					"provisioners": null,
					"references": {
						"auto_create_subnetworks": [],
						"name": [
							"var.vpc_name",
						],
					},
				},
			},
			"google_compute_subnetwork": {
				"subnet": {
					"config":       {},
					"provisioners": null,
					"references": {
						"ip_cidr_range": [
							"var.subnet_cidr",
						],
						"name": [
							"var.subnet_name",
						],
						"network": [
							"google_compute_network.vpc.id",
							"google_compute_network.vpc",
						],
						"region": [
							"var.region",
						],
					},
				},
			},
		},
		"variables": {
			"region": {
				"default":     "us-central1",
				"description": "",
			},
			"subnet_cidr": {
				"default":     "10.12.0.0/24",
				"description": "",
			},
			"subnet_name": {
				"default":     "testsubnet01",
				"description": "",
			},
			"vpc_name": {
				"default":     "testvpc01",
				"description": "",
			},
			"vpc_network_name": {
				"default":     "testnetwork",
				"description": "",
			},
		},
	},
}

module_paths = [
	[],
]

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
modules = _modules.root.modules
providers = _modules.root.providers
resources = _modules.root.resources
variables = _modules.root.variables
outputs = _modules.root.outputs
